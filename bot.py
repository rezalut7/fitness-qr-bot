import asyncio, logging, os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from dotenv import load_dotenv
from database import Session, init_db
from models import Client
from datetime import datetime
from aiogram.fsm.state import StatesGroup, State

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")

load_dotenv()
bot = Bot(os.getenv("BOT_TOKEN"), parse_mode="HTML")
dp = Dispatcher()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------------------------------------------------
class Reg(StatesGroup):
    waiting_phone = State()
    waiting_consent = State()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã -----------------------------------------------------
@dp.message(CommandStart())
async def start(m: Message, state):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º üì±", request_contact=True)]])
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω–æ–≥–æ –∑–∞–ª–∞.\n"
        "üîí –î–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=kb)
    await state.set_state(Reg.waiting_phone)

@dp.message(Reg.waiting_phone, F.contact)
async def got_phone(m: Message, state):
    await state.update_data(phone=m.contact.phone_number)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="consent_no")],
    ])
    await m.answer(
        "–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
        "–∏ –∏—Ö –ø–µ—Ä–µ–¥–∞—á—É —Ç—Ä–µ–Ω–µ—Ä—É (–§–ó-152)?",
        reply_markup=kb)
    await state.set_state(Reg.waiting_consent)

@dp.callback_query(Reg.waiting_consent, F.data.startswith("consent_"))
async def consent(cb, state):
    if cb.data == "consent_no":
        await cb.message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        await state.clear()
        return
    data = await state.get_data()
    async with Session() as s:
        s.add(Client(
            tg_id=cb.from_user.id,
            full_name=cb.from_user.full_name,
            phone=data["phone"],
            consent_at=datetime.utcnow(),
        ))
        await s.commit()
    btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                             callback_data="personal")
    ]])
    await cb.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.",
        reply_markup=btn)
    await state.clear()

@dp.callback_query(F.data == "personal")
async def personal(cb):
    await cb.message.edit_reply_markup()
    await cb.message.answer(
        "üéâ –°–ø–∞—Å–∏–±–æ! –¢—Ä–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# --- –ó–∞–ø—É—Å–∫ -------------------------------------------------------
async def main():
    await init_db()
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
