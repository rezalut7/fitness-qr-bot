import asyncio, logging, os
from datetime import datetime
from functools import partial

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

from database_ydb import save_client

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")

load_dotenv()
bot = Bot(os.getenv("BOT_TOKEN"), parse_mode="HTML")
dp = Dispatcher()

class Reg(StatesGroup):
    waiting_consent = State()
    waiting_phone   = State()

@dp.message(CommandStart())
async def start(m: Message, state):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="yes")],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="no")],
    ])
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω–æ–≥–æ –∑–∞–ª–∞.\n\n"
        "–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–§–ó-152)?",
        reply_markup=kb,
    )
    await state.set_state(Reg.waiting_consent)

@dp.callback_query(Reg.waiting_consent, F.data.in_(["yes", "no"]))
async def consent(cb: CallbackQuery, state):
    if cb.data == "no":
        await cb.message.answer("–û–∫–µ–π, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∏–∫–∞–∫. /start ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å.")
        await state.clear()
        return

    await state.update_data(consent_at=datetime.utcnow())
    kb = ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True,
        keyboard=[[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üì±", request_contact=True)]],
    )
    await cb.message.edit_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await cb.message.answer("‚¨áÔ∏è –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb)
    await state.set_state(Reg.waiting_phone)

@dp.message(Reg.waiting_phone, F.contact)
async def phone(msg: Message, state):
    data = await state.get_data()
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(
        None,
        partial(
            save_client,
            msg.from_user.id,
            msg.from_user.full_name,
            msg.contact.phone_number,
            data["consent_at"],
        ),
    )

    btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="personal")
    ]])
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ñ–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üëá", reply_markup=btn)
    await state.clear()

@dp.callback_query(F.data == "personal")
async def personal(cb: CallbackQuery):
    await cb.message.edit_reply_markup()
    await cb.message.answer("üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã! –¢—Ä–µ–Ω–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
